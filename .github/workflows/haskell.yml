name: Binaries

defaults:
  run:
    shell: bash

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      repository_name: ${{ steps.repo.outputs.repository_name }}
      version: ${{ steps.tag.outputs.version }}
      tag: ${{ steps.tag.outputs.tag }}
      has_new_tag: ${{ steps.tag.outputs.has_new_tag }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Determine repository name
        id: repo
        run: |
          echo "repository_name=$(echo ${{ github.repository }} | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      - name: Determine package version
        id: tag
        run: |
          package_version="$(cat *.cabal | grep '^version:' | cut -d : -f 2 | xargs)"
          echo "Package version is v$package_version"
          echo "version=$package_version" >> $GITHUB_OUTPUT
          if ! git rev-parse "v$package_version" >/dev/null 2>&1; then
            echo "New tag to be created"
            echo "tag=v$package_version" >> $GITHUB_OUTPUT
            echo "has_new_tag=true" >> $GITHUB_OUTPUT
          fi

          
  build:
    permissions:
      contents: write

    runs-on: ${{ matrix.os }}
    needs: setup

    strategy:
      fail-fast: false
      matrix:
        ghc: ["9.10.1", "9.8.2", "9.6.6"]
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: haskell-actions/setup@v2.7.5
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 3.12.1.0

      - name: Set some window specific things
        if: matrix.os == 'windows-latest'
        run: echo 'EXE_EXT=.exe' >> $GITHUB_ENV

      - name: Configure project
        run: |
          cabal configure --enable-tests --enable-benchmarks --write-ghc-environment-files=ghc8.4.4+
          cabal build all --enable-tests --dry-run

      - name: Record dependencies
        run: |
          cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt
          date +"%Y-%m-%d" > date.txt

      - name: Cache cabal store
        uses: actions/cache/restore@v4
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: |
            ${{ needs.setup.outputs.repository_name }}-${{ vars.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
          restore-keys: |
            ${{ needs.setup.outputs.repository_name }}-${{ vars.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
            ${{ needs.setup.outputs.repository_name }}-${{ vars.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
            ${{ needs.setup.outputs.repository_name }}-${{ vars.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

      - name: Build
        run: cabal build all --enable-tests --enable-benchmarks

      - name: Test
        run: cabal test all --enable-tests --enable-benchmarks

      - name: Cache Cabal store
        uses: actions/cache/save@v4
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: |
            ${{ needs.setup.outputs.repository_name }}-${{ vars.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
    

  check:
    needs: [build, setup]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Check if cabal project is sane
        run: |
          PROJECT_DIR=$PWD
          mkdir -p $PROJECT_DIR/build/sdist
          for i in $(git ls-files | grep '\.cabal'); do
            cd $PROJECT_DIR && cd `dirname $i`
            cabal check
          done


  release:
    needs: [build, setup]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.setup.outputs.has_new_tag == 'true'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Create source distribution
        run: |
          PROJECT_DIR=$PWD
          mkdir -p $PROJECT_DIR/build/sdist
          for i in $(git ls-files | grep '\.cabal'); do
            cd $PROJECT_DIR && cd `dirname $i`
            cabal v2-sdist -o $PROJECT_DIR/build/sdist
          done;

      - name: Publish to hackage
        env:
          server: http://hackage.haskell.org
          username: ${{ secrets.HACKAGE_USER }}
          password: ${{ secrets.HACKAGE_PASS }}
          candidate: false
        run: |
          package_version="$(cat *.cabal | grep '^version:' | cut -d : -f 2 | xargs)"
          for PACKAGE_TARBALL in $(find ./build/sdist/ -name "*.tar.gz"); do
            PACKAGE_NAME=$(basename ${PACKAGE_TARBALL%.*.*})
            if ${{ env.candidate }}; then
              TARGET_URL="${{ env.server }}/packages/candidates";
              DOCS_URL="${{ env.server }}/package/$PACKAGE_NAME/candidate/docs"
            else
              TARGET_URL="${{ env.server }}/packages/upload";
              DOCS_URL="${{ env.server }}/package/$PACKAGE_NAME/docs"
            fi
            HACKAGE_STATUS=$(curl --silent --head -w %{http_code} -XGET --anyauth --user "${{ env.username }}:${{ env.password }}" ${{ env.server }}/package/$PACKAGE_NAME -o /dev/null)
            if [ "$HACKAGE_STATUS" = "404" ]; then
              echo "Uploading $PACKAGE_NAME to $TARGET_URL"
              curl -X POST -f --user "${{ env.username }}:${{ env.password }}" $TARGET_URL -F "package=@$PACKAGE_TARBALL"
              echo "Uploaded $PACKAGE_NAME"
            else
              echo "Package $PACKAGE_NAME" already exists on Hackage.
            fi
          done

      - name: "Build Changelog"
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          toTag: HEAD

      - name: Tag published version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.setup.outputs.tag }}',
              sha: context.sha,
              force: true
            })

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag: ${{ needs.setup.outputs.tag }}
          name: Release ${{ needs.setup.outputs.tag }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: false
